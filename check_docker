#!/bin/bash

# TODO
# - return data as performance data

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

NC="/bin/nc"
ECHO="/bin/echo"
GREP="/bin/grep"
SED="/bin/sed"
CUT="/usr/bin/cut"

PROGNAME=`/usr/bin/basename $0`
PROGPATH=`$ECHO $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="0.0.1"


print_usage() {
    $ECHO "Usage: $PROGNAME [-H|--host <host>] [-p|--port <port>]"
    $ECHO "Usage: $PROGNAME [-f <socket_file>]"
    $ECHO -e "Usage: $PROGNAME [-h|--help] [-?] [-V|--version]\n"
}

print_help() {
    $ECHO -e "$PROGNAME $REVISION \n"
    print_usage
    $ECHO -e "Docker plugin for Nagios \n"
}

# defaults
NC_OPTS="-U /var/run/docker.sock"
PORT=4243
HOST=localhost

## main ##

# necessary? detects for a speicfic user (root? nagios?)
# or do we expect docker users to allow anyone to call the remote API (security implications)

if [ `id -u` -ne 0 ]; then
    $ECHO "non-root user detected. please run this script as root."
    exit $STATE_WARNING
fi

# parse arguments

while test -n "$1"; do
    case "$1" in
        # -V|--version
        -V)
            $ECHO "$REVISION"
            exit $STATE_OK
            ;;
        --version)
            $ECHO "$REVISION"
            exit $STATE_OK
            ;;
        # -h|--help
        -h)
            print_help
            exit $STATE_OK
            ;;
        --help)
            print_help
            exit $STATE_OK
            ;;
        # -? for usage
        "-?")
            print_usage
            exit $STATE_OK
            ;;
        # -f <socket_file>
        -f)
            shift
            NC_OPTS="-U $1"
            if [ ! -e $1 ]; then
                $ECHO "ERROR: Socket file not found..."
                exit $STATE_CRITICAL
            fi
            ;;
        # -H|--host <hostname>
        -H)
            shift
            HOST=$1
            NC_OPTS="$HOST $PORT"
            ;;
        --host)
            shift
            HOST=$1
            NC_OPTS="$HOST $PORT"
            ;;
        # -p | --port <port>
        -p)
            shift
            PORT=$1
            NC_OPTS="$HOST $PORT"
            ;;
        --port)
            shift
            PORT=$1
            NC_OPTS="$HOST $PORT"
            ;;
        *)
            $ECHO "ERROR: Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

# make request to socket (or to tcp netaddr)
# not able to easily retrieve response status_code

REQUEST="GET /info HTTP/1.1\r\n"

# execute the request with the appropriate options, and strip the brackets
RES=`$ECHO -e ${REQUEST} | $NC $NC_OPTS | $SED 's/\r/\n/g'`

#grep the json output only (stripped header)
JSON_RES=`$ECHO "$RES" | $GREP "{" | $SED 's/[{}]//g'`

# output for debugging
# echo "$RES"

# status code check
if [[ "$RES" =~ 500 ]]; then
    $ECHO "CRITICAL ERROR: request '${REQUEST}' -- returned 500"
    $ECHO "Internal Server Error"
    exit $STATE_CRITICAL
elif [[ "$RES" =~ 404 ]]; then
    $ECHO "CRITICAL ERROR: request '${REQUEST}' -- returned 404"
    $ECHO "Please check your request"
    exit $STATE_CRITICAL
elif ! [[ "$RES" =~ 200 ]]; then
    $ECHO "UNKNOWN ERROR from request '${REQUEST}'"
    if test -n "$RES"; then
      $ECHO "Full Response from request:"
      $ECHO "$RES"
    else
      $ECHO "Empty response, please check your HOSTNAME:PORT"
    fi
    exit $STATE_UNKOWN
fi

# parses JSON response into dictionary
declare -A DICT
for i in `seq 1 8`; do
    tmp=`$ECHO "$JSON_RES" | $CUT -d',' -f $i`
    DICT[`$ECHO $tmp | $CUT -d':' -f 1 | $SED 's:"::g'`]=`$ECHO $tmp | $CUT -d':' -f 2`
    unset tmp
done

# DEBUG output all key vals
#for key in ${!DICT[@]}; do
#    echo ${key} ${DICT[${key}]}
#done

# output as performance data
#   'label'=value[UOM];[warn];[crit];[min];[max]  space separated

    DATA_LABEL="Images"
    DATA_WARN="8"
    DATA_CRIT="9"
    DATA_MIN="1"
    DATA_MAX="10"

    $ECHO -e "Images ${DICT[Images]}|[$DATA_LABEL]=${DICT[Images]};$DATA_WARN;$DATA_CRIT;$DATA_MIN;$DATA_MAX "; 

    # boundary checks
    if [ ${DICT[Images]} -le ${DATA_MIN} ] ; then
        exit $STATE_CRITICAL
    elif [ ${DICT[Images]} -ge ${DATA_MAX} ] ; then
        exit $STATE_CRITICAL
    # crit or warn?
    elif [ ${DICT[Images]} -ge ${DATA_CRIT} ] ; then
        exit $STATE_CRITICAL
    elif [ ${DICT[Images]} -ge ${DATA_WARN} ] ; then
        exit $STATE_WARNING
    fi
    # everything okay
    exit $STATE_OK

